%% Thurstonian model with ranking data

clear;
close all;

%% User input

% lists

lists = {...
   %       'USPresidents44' ; ...
   'USPresidents10' ; ...
   %    'USHolidays' ; ...
   %        'MovieReleases' ; ...
   %        'ClassicOscarReleases' ; ...
   %        'RecentOscarReleases' ; ...
   %        'BookReleases' ; ...
   %        'Superbowl' ; ...
   %        'USCityPopulations' ; ...
   %        'EuropeanCityPopulations' ; ...
   %        'WorldCityPopulations' ; ...
   %        'CountryPopulations' ; ...
   %         'USStatesWestToEast' ; ...
   %        'CountryLandmasses' ; ...
   %        'RiverLengths'  ; ...
   %        'TenCommandments' ; ...
   %        'NineOfTenAmendments' ; ...
   %        'TenAmendments' ; ...
   %        'MaterialsHardness'; ...
   %        'NBAWest2010' ; ...
   %        'NBAEast2010' ; ...
   %        'NFL2010'; ...
   %        'SurvivorNicaragua'; ...
   };

% plots

plots = {...
   %     'aggregatedScatter' ; ...
   %     'tauPerformance' ; ...
   'latentTruth'    ; ...
   'probabilityTable' ; ...
   };

doPrint = false;

%% Constants

% model
modelName = 'ThurstoneRank_2';

% MCMC properties
nChains = 4; nBurnin = 5e3; nSamples = 1e3; nThin = 100; doParallel = 1;

% colors
try load pantoneSpring2015 pantone; catch load PantoneSpring2015 pantone; end
colorOrder = [...
   pantone.Aquamarine; ...
   pantone.Marsala; ...
   pantone.ClassicBlue; ...
   pantone.ToastedAlmond; ...
   pantone.StrawberryIce; ...
   pantone.Tangerine; ...
   pantone.Custard; ...
   pantone.Scuba; ...
   pantone.GlacierGray; ...
   pantone.DuskBlue; ...
   pantone.Treetop; ...
   pantone.Woodbine; ...
   pantone.LuciteGreen; ...
   pantone.Sandstone; ...
   pantone.Titanium; ...
   pantone.LavenderHerb; ...
   ];
% fontsize
fontSize = 16;

%% Loop over lists
for listIdx = 1:numel(lists)
   
   % load data
   whichList = lists{listIdx};
   d = loadRankData(whichList);
   
   %% Create Borda rankings
   % replace unranked with one more than list length
   tmp = d.ranked;
   tmp(find(isnan(tmp))) = d.nuItem + 1;
   [~, d.borda] = sort(sum(tmp), 'ascend');
   
   %% Create Thurstone ranking
   if exist(['storage/' whichList '_' modelName '.mat'], 'file')
      fprintf('Loading results for JAGS model %s\n', modelName);
      load(['storage/' whichList '_' modelName], 'chains', 'stats', 'diagnostics');
      [nSamples, nChains] = size(chains.yStar_1);
   else
      %% Prepare data
      
      % output parameters
      params = {'muStar', 'sigma', 'yStar'};
      
      % initial values
      generator = @()struct(...
         'mu'       , d.borda                , ...
         'x'        , d.ranking/(d.nuItem+1) ,...
         'sigmaTmp' , rand(d.nuUser,1)       );
      
      % input data
      data = struct(...
         'y'           , d.ranking   , ...
         'nUser'       , d.nuUser    , ...
         'nItems'      , d.nuItem    );
      
      % project ID
      proj_id = 'tmp';
      
      % write the model into a variable (cell variable)
      model = trinity.model2cell([modelName '.txt']);
      
      % tell Trinity which engine to use
      engine = 'jags';
      
      % sample
      fprintf('Running JAGS model %s\n', modelName);
      tic
      [stats, chains, diagnostics, info] = callbayes(engine, ...
         'model'          ,     model , ...
         'data'           ,      data , ...
         'outputname'     , 'samples' , ...
         'init'           , generator , ...
         'modelfilename'  ,   proj_id , ...
         'datafilename'   ,   proj_id , ...
         'initfilename'   ,   proj_id , ...
         'scriptfilename' ,   proj_id , ...
         'logfilename'    ,   proj_id , ...
         'nchains'        ,  nChains  , ...
         'nburnin'        ,  nBurnin  , ...
         'nsamples'       , nSamples  , ...
         'monitorparams'  ,    params , ...
         'thin'           ,    nThin  , ...
         'workingdir'     ,  proj_id  , ...
         'verbosity'      ,        0  , ...
         'saveoutput'     ,     true  , ...
         'parallel'       , doParallel, ...
         'modules'        ,  {'dic'}  );
      
      % display and save
      fprintf('%s took %f seconds!\n', upper(engine), toc)
      save(['storage/' whichList '_' modelName], 'chains', 'stats', 'diagnostics');
      
   end
   
   % convergence
   disp('Convergence statistics:')
   grtable(chains, 1.05)
   
   % create Thurstonian order
   [~, d.thurstone] = sort(codatable(chains, 'muStar', @mean)', 'ascend');
   d.sigma = codatable(chains, 'sigma', @mean);
   
   % Borda and Thurstone tau, and posterior distribution for Thurstone
   if isfield(d, 'groundTruth')
      d.bordaTau =  kendalltau_order(d.borda, d.groundTruth);
      d.thurstoneTau =  kendalltau_order(d.thurstone, d.groundTruth);
      % posterior tau distribution
      store = nan(nChains*nSamples, d.nuItem);
      for idx = 1:d.nuItem
         eval(sprintf('store(:, idx) = chains.yStar_%d(:);', idx));
      end
      d.posteriorTau = nan(nChains*nSamples, 1);
      for idx = 1:nChains*nSamples
         d.posteriorTau(idx) = kendalltau_order(store(idx, :), d.groundTruth);
      end
   end
   
   % display Borda and Thurstone orders
   disp('-----');
   if isfield(d, 'groundTruth')
      fprintf('Borda, tau = %d \t Thurstone, tau = %d\n', ...
         d.bordaTau, ...
         d.thurstoneTau ...
         );
   end
   for i = 1:d.nuItem
      fprintf('%-40s \t %-40s\n', ...
         d.uItem{d.borda(i)}, ...
         d.uItem{d.thurstone(i)} ...
         );
   end
   
   %% Plots
   
   for whichPloti = 1:numel(plots)
      
      % this plot
      whichPlot = plots{whichPloti};
      
      switch whichPlot
         
         case 'aggregatedScatter'
            aggregatedScatter(d, pantone.ClassicBlue, 1, 100+listIdx, 14);
            
         case 'tauPerformance'
            tauPerformance(d, pantone.Custard, pantone.ClassicBlue, 200+listIdx, 14);
            
         case 'latentTruth'
            latentTruth(d, chains, 50, 3, pantone.ClassicBlue, 300+listIdx, 14);
            
         case 'probabilityTable'
            p = probabilityTable(d, chains, whichList, 3);
            
      end
      
      % print figure
      if doPrint
         print(['figures/' whichList '_' whichPlot '.eps'], '-depsc');
         print(['figures/' whichList '_' whichPlot '.png'], '-dpng', '-r600');
      end
   end
   
end




